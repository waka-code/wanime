/*import { useState } from 'react';
import axios from 'axios';

function Login() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [errorMessage, setErrorMessage] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      const response = await axios.post('/api/login', {
        username,
        password,
      });

      // El servidor devuelve un token de autenticación si el login es exitoso.
      const token = response.data.token;

      // Guardamos el token en el localStorage del navegador para mantener la sesión abierta.
      localStorage.setItem('token', token);

      // Actualizamos el estado de autenticación del usuario.
      setAuthenticated(true);

      // Redirigimos al usuario a la página deseada.
      history.push('/home');
    } catch (error) {
      // Manejamos el error en caso de que el login falle.
      setErrorMessage('Nombre de usuario o contraseña incorrectos');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Nombre de usuario:
        <input type="text" value={username} onChange={(event) => setUsername(event.target.value)} />
      </label>
      <label>
        Contraseña:
        <input type="password" value={password} onChange={(event) => setPassword(event.target.value)} />
      </label>
      <button type="submit">Ingresar</button>
      {errorMessage && <p>{errorMessage}</p>}
    </form>
  );
}

***************

import express from "express";
import mongoose from "mongoose";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";

const app = express();
const port = 3000;
const secret = "mysecret";

mongoose.connect("mongodb://localhost/mydatabase", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const UserSchema = new mongoose.Schema({
  email: String,
  password: String,
});

const User = mongoose.model("User", UserSchema);

app.use(express.json());

app.post("/login", async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });

  if (!user) {
    return res.status(400).json({ error: "Invalid credentials" });
  }

  const isPasswordValid = await bcrypt.compare(password, user.password);

  if (!isPasswordValid) {
    return res.status(400).json({ error: "Invalid credentials" });
  }

  const token = jwt.sign({ email: user.email }, secret);

  res.json({ token });
});

app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});


const express = require('express');
const mongoose = require('mongoose');

const app = express();

// Conexión a la base de datos de MongoDB
mongoose.connect('mongodb://localhost/my_database', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Definición del modelo de datos
const bookSchema = new mongoose.Schema({
  title: String,
  author: String,
  genre: String,
});

const Book = mongoose.model('Book', bookSchema);

// Ruta para obtener todos los libros con paginación
app.get('/books', async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const skip = (page - 1) * limit;

  try {
    const books = await Book.find().skip(skip).limit(limit);
    const count = await Book.countDocuments();

    res.json({
      books,
      totalPages: Math.ceil(count / limit),
      currentPage: page,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Error al obtener los libros.' });
  }
});

// Iniciar el servidor
app.listen(3000, () => {
  console.log('Servidor iniciado en http://localhost:3000');
});


import { useState, useEffect } from 'react';
import axios from 'axios';

function App() {
  const [books, setBooks] = useState([]);
  const [totalPages, setTotalPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [limit, setLimit] = useState(10);

  useEffect(() => {
    const fetchBooks = async () => {
      const response = await axios.get('/books', {
        params: {
          page: currentPage,
          limit: limit,
        },
      });
      setBooks(response.data.books);
      setTotalPages(response.data.totalPages);
    };
    fetchBooks();
  }, [currentPage, limit]);

  const handlePrevPage = () => {
    setCurrentPage((prevPage) => prevPage - 1);
  };

  const handleNextPage = () => {
    setCurrentPage((prevPage) => prevPage + 1);
  };

  return (
    <div>
      <h1>Lista de libros</h1>
      <ul>
        {books.map((book) => (
          <li key={book._id}>
            {book.title} - {book.author} - {book.genre}
          </li>
        ))}
      </ul>
      <div>
        <button onClick={handlePrevPage} disabled={currentPage === 1}>
          Anterior
        </button>
        <span>
          Página {currentPage} de {total

*/